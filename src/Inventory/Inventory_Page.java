/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Inventory;


import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import inventorycashierinsystem.LogIn_Page;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author student.admin
 */
public final class Inventory_Page extends javax.swing.JFrame {

    /**
     * Creates new form Cashier_Home_Page
     */
    PreparedStatement ps;
    Connection con;
    Statement st;
    ResultSet rs;
    int stock;
    int avail;
    int total;
    String g;

    public Inventory_Page() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        date();
        time();
        Display();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always.
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jdate = new javax.swing.JLabel();
        jtime = new javax.swing.JLabel();
        useID = new javax.swing.JTextField();
        label13 = new java.awt.Label();
        useemail = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        jquantity = new javax.swing.JTextField();
        label7 = new java.awt.Label();
        junit = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        label8 = new java.awt.Label();
        product = new javax.swing.JTextField();
        label9 = new java.awt.Label();
        des = new javax.swing.JTextField();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        bprice = new javax.swing.JTextField();
        sprice = new javax.swing.JTextField();
        label12 = new java.awt.Label();
        productID = new javax.swing.JTextField();
        label14 = new java.awt.Label();
        stockIN = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jstats = new javax.swing.JTextField();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jLabel1.setText("INVENTORY");

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/product.png"))); // NOI18N
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "InventoryID", "Product Name", "Description", "Buying Price", "Selling Price", "Quantity", "Unit Of Measure", "Status"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/exit.png"))); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/refresh.png"))); // NOI18N
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jdate.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        jdate.setToolTipText("");

        jtime.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        jtime.setToolTipText("");

        useID.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        useID.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        useID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useIDActionPerformed(evt);
            }
        });

        label13.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label13.setText("UserID :");

        useemail.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        useemail.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        useemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useemailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(useID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(useemail, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(390, 390, 390)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(72, 72, 72)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(useID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(useemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtime, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel14))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        label1.setText("Product Inventory");

        jquantity.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        jquantity.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jquantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jquantityActionPerformed(evt);
            }
        });

        label7.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label7.setText("Quantity :");

        junit.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        junit.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        junit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                junitActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/product.png"))); // NOI18N
        jLabel11.setText("Add Product");
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/update.PNG"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/delete.PNG"))); // NOI18N
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        label8.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label8.setText("Product :");

        product.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        product.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productActionPerformed(evt);
            }
        });

        label9.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label9.setText("Description :");

        des.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        des.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desActionPerformed(evt);
            }
        });

        label10.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label10.setText("Buying Price :");

        label11.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label11.setText("Selling Price :");

        bprice.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        bprice.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        bprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpriceActionPerformed(evt);
            }
        });

        sprice.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        sprice.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        sprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spriceActionPerformed(evt);
            }
        });

        label12.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label12.setText("Product ID :");

        productID.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        productID.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        productID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productIDActionPerformed(evt);
            }
        });

        label14.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        label14.setText("Available Stocks :");

        stockIN.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        stockIN.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        stockIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockINActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/chest_in_small.png"))); // NOI18N
        jLabel2.setText("Stock Out");
        jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventorycashierinsystem/img/chest_out_small.png"))); // NOI18N
        jLabel3.setText("Stock In");
        jLabel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jstats.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        jstats.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jstats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(stockIN))
                                    .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                                .addComponent(jquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(junit, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(128, 128, 128))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(74, 74, 74)
                                        .addComponent(jstats, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(des, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bprice, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(sprice, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel13)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jstats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(junit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jquantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jquantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jquantityActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        // this handle for the selected item:

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedROwIndex = table.getSelectedRow();
        productID.setText(model.getValueAt(selectedROwIndex, 0).toString());
        product.setText(model.getValueAt(selectedROwIndex, 1).toString());
        junit.setText(model.getValueAt(selectedROwIndex, 6).toString());
        jquantity.setText(model.getValueAt(selectedROwIndex, 5).toString());
        des.setText(model.getValueAt(selectedROwIndex, 2).toString());
        bprice.setText(model.getValueAt(selectedROwIndex, 3).toString());
        sprice.setText(model.getValueAt(selectedROwIndex, 4).toString());
        jstats.setText(model.getValueAt(selectedROwIndex, 7).toString());

        int vanie = Integer.parseInt(jquantity.getText());
        if (vanie < 10) {
            int khunsho = JOptionPane.showConfirmDialog(null, "Would like to add some stock?", "", JOptionPane.YES_NO_OPTION);
            if (khunsho == 0) {
                String p = JOptionPane.showInputDialog(null, "Input amount");
                try {
                    String Query = "UPDATE `inventory` SET `InventoryQuantity`= InventoryQuantity + '" + p + "'  WHERE InventoryID = '" + productID.getText() + "'";
                    ps = con.prepareStatement(Query);
                    if (ps.executeUpdate() != 0) {
                        JOptionPane.showMessageDialog(rootPane, "You add some stock from " + product.getText());
                        Display();
                        try {
                            String trans = "Add Stocks";
                            String record = ("INSERT INTO `stafftransaction`(`InventoryID`, `SQuantity`, `TypeOfTransaction`, `UserID`, `Date`, `Time`) VALUES (?,?,?,?,?,?)");
                            ps = con.prepareStatement(record);
                            ps.setString(1, productID.getText());
                            ps.setString(2, jquantity.getText());
                            ps.setString(3, trans);
                            ps.setString(4, useID.getText());
                            ps.setString(5, jdate.getText());
                            ps.setString(6, jtime.getText());
                            if (ps.executeUpdate() != 0) {
                                JOptionPane.showMessageDialog(rootPane, "Has been Recorded");
                                Display();
                                stockIN.setText("");
                            }
                        } catch (Exception e) {
                        }
                    }
                } catch (Exception e) {

                }
            }

        }


    }//GEN-LAST:event_tableMouseClicked

    private void junitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_junitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_junitActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
        Display();
        refresh();

    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // TODO add your handling code here:
        new LogIn_Page().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        // TODO add your handling code here:
        h();
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        // TODO add your handling code here:
        Update();
        Display();
        refresh();
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        // TO Delete
        Delete();
        Display();
    }//GEN-LAST:event_jLabel13MouseClicked

    private void productActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productActionPerformed

    private void desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_desActionPerformed

    private void bpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bpriceActionPerformed

    private void spriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spriceActionPerformed

    private void productIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productIDActionPerformed

    private void useIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useIDActionPerformed

    private void stockINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockINActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockINActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        StockOut();
        refresh();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        StockIN();
        refresh();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void useemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useemailActionPerformed

    private void jstatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jstatsActionPerformed
    public void Display() {
//
//        try {
//            MongoClientURI connectionString = new MongoClientURI("mongodb+srv://vanie:vanie@cluster0.e33jxbi.mongodb.net/?retryWrites=true&w=majority");
//            MongoClient mongo = new MongoClient(connectionString);
//            MongoDatabase database = mongo.getDatabase("Big_Data");
//            MongoCredential.createCredential("vanie", "Big_Data", "vanie".toCharArray());
//            MongoCollection<Document> collection = database.getCollection("Products");
//
//            MongoCursor<Document> query = collection.find().iterator();
//            DefaultTableModel model = (DefaultTableModel) table.getModel();
//            model.setRowCount(0);
//
//            while (query.hasNext()) {
//                MongoCollection<Document> store = (MongoCollection<Document>) query.next();
//                String p = (String) store.equals("_id");
//
//                String r = (String) store.get("Productname");
//                String o = (String) store.get("Description");
//                String d = (String) store.get("Bprice");
//                String u = (String) store.get("Sprice");
//                String c = (String) store.get("Quant");
//                String t = (String) store.get("Unit");
//                String s = (String) store.get("Status");

//                Object[] row = {store};
//                model.addRow(row);
//
//            }
//
//        } catch (Exception Ex) {
//            JOptionPane.showMessageDialog(this, Ex);
//        }
        try {
            MongoClient mongoClient;
            DBCursor cursor;
            mongoClient = new MongoClient("localhost", 27017);
            DB db = mongoClient.getDB("Big_Data");
            DBCollection coll = db.getCollection("Products");
            cursor = coll.find();
            
            String[] columnNames = {"InventoryID", "Product Name", "Description", "Buying Price", "Selling Price", "Quantity","Unit Of Measure ","Status"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);


            while (cursor.hasNext()) {
                DBObject obj = cursor.next();
                String p = (String) obj.get("Productname");
                String r = (String) obj.get("Description");
                String o = (String) obj.get("Bprice");
                String d = (String) obj.get("Sprice");
                String u = (String) obj.get("Quant");
                String c = (String) obj.get("Unit");
                String t = (String) obj.get("Status");
                String s = (String) obj.get("_id");

                model.addRow(new Object[]{s, p, r, o, d, u, c, t});
            }
            table.setModel(model);
            cursor.close();
            mongoClient.close();
            if (cursor != null) {
                cursor.close();
            }
            if (mongoClient != null) {
                mongoClient.close();
            }
        } catch (Exception ex) {
            System.out.println(ex);

        }
//        String sql = "SELECT * FROM `inventory`";
//        try {
//            DefaultTableModel model = (DefaultTableModel) table.getModel();
//            model.setRowCount(0);
//            st = con.createStatement();
//            rs = st.executeQuery(sql);
//            while (rs.next()) {
//                String Inventory = rs.getString("InventoryID");
//                String Product = rs.getString("ProductName");
//                String Description = rs.getString("Description");
//                String Buying = rs.getString("BuyingPrice");
//                String Selling = rs.getString("SellingPrice");
//                String Quantity = rs.getString("InventoryQuantity");
//                String Unit = rs.getString("UnitOfMeasure");
//                String Stat = rs.getString("InventoryStatus");
//
//                Object[] row = {Inventory, Product, Description, Buying, Selling, Quantity, Unit, Stat};
//                model.addRow(row);
//            }
//
//        } catch (Exception ex) {
//            System.out.println(ex);
//
//        }
    }

    public void refresh() {
        product.setText("");
        junit.setText("");
        jquantity.setText("");
        des.setText("");
        bprice.setText("");
        sprice.setText("");
        productID.setText("");
        stockIN.setText("");

    }

//    public void AddProduct() {
//        String pname = product.getText();
//        String unit = junit.getText();
//        String qyt = jquantity.getText();
//        String descript = des.getText();
//        String bprcs = bprice.getText();
//        String sprcs = sprice.getText();
//
//        try {
//            con = DB_connection.getConnection();
//            ps = con.prepareStatement("INSERT INTO `inventory`(`ProductName`, `Description`, `BuyingPrice`, `SellingPrice`, `InventoryQuantity`, `UnitOfMeasure`,) VALUES (?,?,?,?,?,?,?)");
//            ps.setString(1, product.getText());
//            ps.setString(2, des.getText());
//            ps.setString(3, bprice.getText());
//            ps.setString(4, sprice.getText());
//            ps.setString(5, jquantity.getText());
//            ps.setString(6, junit.getText());
//
//          
//                if (ps.executeUpdate() != 0) {
//
//                    String b = "SELECT * FROM inventory WHERE InventoryID =(SELECT max(InventoryID) FROM inventory)";
//                    try {
//                        con = DB_connection.getConnection();
//                        ps = con.prepareStatement(b);
//                        rs = ps.executeQuery();
//                        if (rs.next()) {
//                            String gg = rs.getString("InventoryID");
//                            des.setText(gg);
//                            try {
//                                String trans = "Add Product";
//                                String recor = ("INSERT INTO `stafftransaction`(`InventoryID`, `SQuantity`, `TypeOfTransaction`, `UserID`, `Date`, `Time`) VALUES (?,?,?,?,?,?)");
//                                con = DB_connection.getConnection();
//                                ps = con.prepareStatement(recor);
//                                ps.setString(1, des.getText());
//                                ps.setString(2, jquantity.getText());
//                                ps.setString(3, trans);
//                                ps.setString(4, useID.getText());
//                                ps.setString(5, jdate.getText());
//                                ps.setString(6, jtime.getText());
//                                if (ps.executeUpdate() != 0) {
//                                    JOptionPane.showMessageDialog(rootPane, "Has been Recorded");
//                                    Display();
//                                }
//                            } catch (Exception e) {
//                            }
//                        }
//                    } catch (Exception ex) {
//                    }
//                    JOptionPane.showMessageDialog(rootPane, "New Product being added");
//                
//            }
//        } catch (SQLException ex) {
//        }
//
//    }
    public void h() {
        String pname = product.getText();
        String unit = junit.getText();
        String qyt = jquantity.getText();
        String descript = des.getText();
        String bprcs = bprice.getText();
        String sprcs = sprice.getText();
        String stts = "Enable";

        try {
            ps = con.prepareStatement("INSERT INTO `inventory`(`ProductName`, `Description`, `BuyingPrice`, `SellingPrice`, `InventoryQuantity`, `UnitOfMeasure`, `Status`) VALUES  (?,?,?,?,?,?,?)");
            ps.setString(1, product.getText());
            ps.setString(2, des.getText());
            ps.setString(3, bprice.getText());
            ps.setString(4, sprice.getText());
            ps.setString(5, jquantity.getText());
            ps.setString(6, junit.getText());
            ps.setString(7, stts);
            if (ps.executeUpdate() != 0) {
                JOptionPane.showMessageDialog(rootPane, "New Product being added");
                String b = "SELECT * FROM inventory WHERE InventoryID =(SELECT max(InventoryID) FROM inventory)";
                try {
                    ps = con.prepareStatement(b);
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        String gg = rs.getString("InventoryID");
                        des.setText(gg);
                        try {
                            String trans = "Add Product";
                            String recor = ("INSERT INTO `stafftransaction`(`InventoryID`, `SQuantity`, `TypeOfTransaction`, `UserID`, `Date`, `Time`) VALUES (?,?,?,?,?,?)");
                            ps = con.prepareStatement(recor);
                            ps.setString(1, des.getText());
                            ps.setString(2, jquantity.getText());
                            ps.setString(3, trans);
                            ps.setString(4, useID.getText());
                            ps.setString(5, jdate.getText());
                            ps.setString(6, jtime.getText());
                            if (ps.executeUpdate() != 0) {
                                JOptionPane.showMessageDialog(rootPane, "Has been Recorded");
                                new Inventory_Page().setVisible(true);
                                setVisible(false);
                            }
                        } catch (Exception e) {
                        }
                    }
                } catch (Exception ex) {
                }
            }
        } catch (SQLException ex) {
        }
    }

    public void Update() {
        try {
            String Query = "UPDATE `inventory` SET `Description`=?,`BuyingPrice`=?,`SellingPrice`=?,`InventoryQuantity`=?,`UnitOfMeasure`=?, `ProductName`= ?, `InventoryStatus` =? WHERE InventoryID = ?";
            ps = con.prepareStatement(Query);
            ps.setString(1, des.getText());
            ps.setString(2, bprice.getText());
            ps.setString(3, sprice.getText());
            ps.setString(4, jquantity.getText());
            ps.setString(5, junit.getText());
            ps.setString(6, product.getText());
            ps.setString(7, jstats.getText());
            ps.setString(8, productID.getText());

            if (ps.executeUpdate() != 0) {

                String trans = "Edit";
                String record = ("INSERT INTO `stafftransaction`(`InventoryID`, `SQuantity`, `TypeOfTransaction`, `UserID`, `Date`, `Time`) VALUES (?,?,?,?,?,?)");
                ps = con.prepareStatement(record);
                ps.setString(1, productID.getText());
                ps.setString(2, jquantity.getText());
                ps.setString(3, trans);
                ps.setString(4, useID.getText());
                ps.setString(5, jdate.getText());
                ps.setString(6, jtime.getText());
                if (ps.executeUpdate() != 0) {
                    JOptionPane.showMessageDialog(rootPane, "Has been Recorded");
                    Display();
                    stockIN.setText("");
                }

                JOptionPane.showMessageDialog(rootPane, "Product is Updated");
            } else {

            }
        } catch (SQLException ex) {
        }

    }

    public void StockIN() {
        String vanie = stockIN.getText();
        if (vanie.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please input Quantity to be Added!");
        } else {
            try {
                String Query = "UPDATE `inventory` SET `InventoryQuantity`= InventoryQuantity + '" + stockIN.getText() + "'  WHERE InventoryID = '" + productID.getText() + "'";
                ps = con.prepareStatement(Query);
                if (ps.executeUpdate() != 0) {
                    JOptionPane.showMessageDialog(rootPane, "You add some stock from " + product.getText());
                    Display();
                    try {
                        String trans = "Add Stocks";
                        String record = ("INSERT INTO `stafftransaction`(`InventoryID`, `SQuantity`, `TypeOfTransaction`, `UserID`, `Date`, `Time`) VALUES (?,?,?,?,?,?)");
                        ps = con.prepareStatement(record);
                        ps.setString(1, productID.getText());
                        ps.setString(2, jquantity.getText());
                        ps.setString(3, trans);
                        ps.setString(4, useID.getText());
                        ps.setString(5, jdate.getText());
                        ps.setString(6, jtime.getText());
                        if (ps.executeUpdate() != 0) {
                            JOptionPane.showMessageDialog(rootPane, "Has been Recorded");
                            Display();
                            stockIN.setText("");
                        }
                    } catch (Exception e) {
                    }
                }
            } catch (Exception e) {

            }
        }
    }

    public void StockOut() {
        String vanie = stockIN.getText();
        if (vanie.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please input Quantity to be deducted!");
        } else {
            try {
                String Query = "UPDATE `inventory` SET `InventoryQuantity`= InventoryQuantity - '" + stockIN.getText() + "'  WHERE InventoryID = '" + productID.getText() + "'";
                ps = con.prepareStatement(Query);
                if (ps.executeUpdate() != 0) {
                    JOptionPane.showMessageDialog(rootPane, "You get some stock from " + product.getText());
                    Display();
                    try {
                        String trans = "Get";
                        String record = ("INSERT INTO `stafftransaction`(`InventoryID`, `SQuantity`, `TypeOfTransaction`, `UserID`, `Date`, `Time`) VALUES (?,?,?,?,?,?)");
                        ps = con.prepareStatement(record);
                        ps.setString(1, productID.getText());
                        ps.setString(2, jquantity.getText());
                        ps.setString(3, trans);
                        ps.setString(4, useID.getText());
                        ps.setString(5, jdate.getText());
                        ps.setString(6, jtime.getText());
                        if (ps.executeUpdate() != 0) {
                            JOptionPane.showMessageDialog(rootPane, "Has been Recorded");
                            Display();
                            stockIN.setText("");
                        }
                    } catch (Exception e) {
                    }
                }
            } catch (Exception e) {

            }
        }
    }

    public void Delete() {

        if (!productID.getText().equals("")) {

            try {
                ps = con.prepareStatement("DELETE FROM `inventory` WHERE InventoryID = ?");
                int id_products = Integer.parseInt(productID.getText());
                ps.setInt(1, id_products);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(rootPane, "Has Been Remove");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Unable to Remove");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "No ID to Remove");
        }
    }

    public void get(String van) {
        LogIn_Page h = new LogIn_Page();
        h.van();
        useemail.setText(van);
        try {
            st = con.createStatement();
            String sql = "SELECT * FROM users WHERE Email = '" + van + "'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                String usertoid = rs.getString("UserID");
                useID.setText(usertoid);
            }
        } catch (Exception e) {
        }

    }

    public void date() {
        Calendar c = new GregorianCalendar();
        int day = c.get(Calendar.DAY_OF_MONTH);
        int month = c.get(Calendar.MONTH);
        int year = c.get(Calendar.YEAR);
        jdate.setText("" + year + "/" + month + "/" + day + "");

    }

    public void time() {
        Calendar c = new GregorianCalendar();
        int seconds = c.get(Calendar.SECOND);
        int minutes = c.get(Calendar.MINUTE);
        int hours = c.get(Calendar.HOUR);
        jtime.setText("" + hours + ":" + minutes + ":" + seconds + "");
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bprice;
    private javax.swing.JTextField des;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jdate;
    private javax.swing.JTextField jquantity;
    private javax.swing.JTextField jstats;
    private javax.swing.JLabel jtime;
    private javax.swing.JTextField junit;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JTextField product;
    private javax.swing.JTextField productID;
    private javax.swing.JTextField sprice;
    private javax.swing.JTextField stockIN;
    private javax.swing.JTable table;
    private javax.swing.JTextField useID;
    private javax.swing.JTextField useemail;
    // End of variables declaration//GEN-END:variables
}
